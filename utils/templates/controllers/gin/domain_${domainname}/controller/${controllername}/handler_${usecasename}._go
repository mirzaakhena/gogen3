package {{LowerCase .ControllerName}}

import (
	"context"
	"net/http"

	"github.com/gin-gonic/gin"

	"{{.PackagePath}}/domain_{{.DomainName}}/usecase/{{LowerCase .UsecaseName}}"
	"{{.PackagePath}}/shared/infrastructure/logger"
	"{{.PackagePath}}/shared/infrastructure/util"
)

// {{CamelCase .UsecaseName}}Handler ...
func (r *Controller) {{CamelCase .UsecaseName}}Handler(inputPort {{LowerCase .UsecaseName}}.Inport) gin.HandlerFunc {

	type request struct {
	}

	type response struct {
	}

	return func(c *gin.Context) {

		traceID := util.GenerateID(16)

		ctx := logger.SetTraceID(context.Background(), traceID)

		var jsonReq request
		if err := c.BindJSON(&jsonReq); err != nil {
			r.log.Error(ctx, err.Error())
			c.JSON(http.StatusBadRequest, NewErrorResponse(err, traceID))
			return
		}

		var req {{LowerCase .UsecaseName}}.InportRequest
		// TODO assign value from jsonReq object to InportRequest req

		r.log.Info(ctx, util.MustJSON(req))

		res, err := inputPort.Execute(ctx, req)
		if err != nil {
			r.log.Error(ctx, err.Error())
			c.JSON(http.StatusBadRequest, NewErrorResponse(err, traceID))
			return
		}

		var jsonRes response
		// TODO assign value from InportResponse object to response jsonRes object
		_ = res

		r.log.Info(ctx, util.MustJSON(jsonRes))
		c.JSON(http.StatusOK, NewSuccessResponse(jsonRes, traceID))

	}
}
