package {{LowerCase .ControllerName}}

import (
	"net/http"

	"github.com/labstack/echo/v4"

	"{{.PackagePath}}/infrastructure/log"
	"{{.PackagePath}}/infrastructure/util"
	"{{.PackagePath}}/usecase/{{LowerCase .UsecaseName}}"
)

// {{CamelCase .UsecaseName}}Handler ...
func (r *Controller){{CamelCase .UsecaseName}}Handler(inputPort {{LowerCase .UsecaseName}}.Inport) echo.HandlerFunc {

    type request struct {
    }

    type response struct {
    }

	return func(c echo.Context) error {

		traceID := util.GenerateID()

		ctx := log.Context(c.Request().Context(), traceID)

        var jsonReq request
		if err := c.Bind(&jsonReq); err != nil {
			log.Error(ctx, err.Error())
			return c.JSON(http.StatusBadRequest, NewErrorResponse(err, traceID))
		}

		var req {{LowerCase .UsecaseName}}.InportRequest
		// TODO assign value from jsonReq object to InportRequest req

		log.Info(ctx, util.MustJSON(req))

		res, err := inputPort.Execute(ctx, req)
		if err != nil {
			log.Error(ctx, err.Error())
			return c.JSON(http.StatusBadRequest, NewErrorResponse(err, traceID))
		}

		var jsonRes response
		// TODO assign value from InportResponse object to response jsonRes object
		_ = res

		log.Info(ctx, util.MustJSON(jsonRes))
		return c.JSON(http.StatusOK, NewSuccessResponse(jsonRes, traceID))

	}
}
