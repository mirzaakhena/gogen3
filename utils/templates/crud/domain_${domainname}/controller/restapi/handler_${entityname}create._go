package restapi

import (
	"net/http"
	"time"

	"github.com/gin-gonic/gin"

	"{{.PackagePath}}/infrastructure/log"
	"{{.PackagePath}}/infrastructure/util"
	"{{.PackagePath}}/usecase/{{LowerCase .EntityName}}create"
)

// {{LowerCase .EntityName}}CreateHandler ...
func (r *Controller) {{LowerCase .EntityName}}CreateHandler(inputPort {{LowerCase .EntityName}}create.Inport) gin.HandlerFunc {

	type request struct {
		Name string `json:"name"`
	}

	type response struct {
		ID string `json:"id"`
	}

	return func(c *gin.Context) {

		traceID := util.GenerateID()

		ctx := log.Context(c.Request.Context(), traceID)

		var jsonReq request
		if err := c.BindJSON(&jsonReq); err != nil {
			log.Error(ctx, err.Error())
			c.JSON(http.StatusBadRequest, NewErrorResponse(err, traceID))
			return
		}

		var req {{LowerCase .EntityName}}create.InportRequest
		req.Name = jsonReq.Name
		req.Now = time.Now()

		log.Info(ctx, util.MustJSON(req))

		res, err := inputPort.Execute(ctx, req)
		if err != nil {
			log.Error(ctx, err.Error())
			c.JSON(http.StatusBadRequest, NewErrorResponse(err, traceID))
			return
		}

		var jsonRes response

		jsonRes.ID = res.{{PascalCase .EntityName}}ID

		log.Info(ctx, util.MustJSON(jsonRes))
		c.JSON(http.StatusOK, NewSuccessResponse(jsonRes, traceID))

	}
}
