package restapi

import (
	"github.com/gin-gonic/gin"
	"net/http"
	"time"

	"{{.PackagePath}}/infrastructure/log"
	"{{.PackagePath}}/infrastructure/util"
	"{{.PackagePath}}/usecase/{{LowerCase .EntityName}}readall"
)

// {{LowerCase .EntityName}}ReadAllHandler ...
func (r *Controller) {{LowerCase .EntityName}}ReadAllHandler(inputPort {{LowerCase .EntityName}}readall.Inport) gin.HandlerFunc {

	type request struct {
		Page      int    `form:"page,default=1"`
		Size      int    `form:"size,default=100"`
		NameLike  string `form:"name_like"`
		DateStart string `form:"date_start"`
		DateEnd   string `form:"date_end"`
	}

	type {{PascalCase .EntityName}} struct {
		ID   string `json:"id"`
		Name string `json:"name"`
		Date string `json:"date"`
	}

	type response struct {
		Items []{{PascalCase .EntityName}} `json:"items"`
		Count int64 `json:"count" json:"count,omitempty"`
	}

	return func(c *gin.Context) {

		traceID := util.GenerateID()

		ctx := log.Context(c.Request.Context(), traceID)

		var jsonReq request
		if err := c.Bind(&jsonReq); err != nil {
			log.Error(ctx, err.Error())
			c.JSON(http.StatusBadRequest, NewErrorResponse(err, traceID))
			return
		}

		var req {{LowerCase .EntityName}}readall.InportRequest
		req.Page = jsonReq.Page
		req.Size = jsonReq.Size

		if jsonReq.NameLike != "" {
			req.NameLike = &jsonReq.NameLike
		}

		if jsonReq.DateStart != "" {
			dateStart, err := time.Parse("2006-01-02", jsonReq.DateStart)
			if err != nil {
				return
			}
			req.DateStart = &dateStart
		}

		if jsonReq.DateEnd != "" {
			dateEnd, err := time.Parse("2006-01-02", jsonReq.DateEnd)
			if err != nil {
				return
			}
			req.DateEnd = &dateEnd
		}

		log.Info(ctx, util.MustJSON(req))

		res, err := inputPort.Execute(ctx, req)
		if err != nil {
			log.Error(ctx, err.Error())
			c.JSON(http.StatusBadRequest, NewErrorResponse(err, traceID))
			return
		}

		var jsonRes response

		jsonRes.Count = res.Count

		for _, sm := range res.ListOf{{PascalCase .EntityName}} {
			jsonRes.Items = append(jsonRes.Items, {{PascalCase .EntityName}}{
				ID:   sm.ID,
				Name: sm.Name,
				Date: sm.Date.Format("2006-01-02"),
			})
		}

		log.Info(ctx, util.MustJSON(jsonRes))
		c.JSON(http.StatusOK, NewSuccessResponse(jsonRes, traceID))

	}
}
