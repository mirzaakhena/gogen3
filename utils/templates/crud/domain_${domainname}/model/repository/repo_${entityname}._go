package repository

import (
	"context"
	"{{.PackagePath}}/domain_{{.DomainName}}/model/entity"
	"time"
)

type Save{{PascalCase .EntityName}}Repo interface {
	Save{{PascalCase .EntityName}}(ctx context.Context, obj *entity.{{PascalCase .EntityName}}) error
}

type FindAll{{PascalCase .EntityName}}RepoRequest struct {
	Page      int
	Size      int
	NameLike  *string
	DateStart *time.Time
	DateEnd   *time.Time
}

type FindAll{{PascalCase .EntityName}}Repo interface {
	FindAll{{PascalCase .EntityName}}(ctx context.Context, req FindAll{{PascalCase .EntityName}}RepoRequest) ([]*entity.{{PascalCase .EntityName}}, int64, error)
}

type Delete{{PascalCase .EntityName}}Repo interface {
	Delete{{PascalCase .EntityName}}(ctx context.Context, somethingID string) error
}

type FindOne{{PascalCase .EntityName}}Repo interface {
	FindOne{{PascalCase .EntityName}}(ctx context.Context, somethingID string) (*entity.{{PascalCase .EntityName}}, error)
}

type UpdateName{{PascalCase .EntityName}}Repo interface {
	UpdateName{{PascalCase .EntityName}}(ctx context.Context, id string, callback func(obj *entity.{{PascalCase .EntityName}}) error) error
}
