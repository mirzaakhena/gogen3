package {{LowerCase .EntityName}}readall

import (
	"context"
	"{{.PackagePath}}/domain_{{.DomainName}}/model/repository"
	sharedservice "{{.PackagePath}}/shared/model/service"
)

//go:generate mockery --name Outport -output mocks/

type {{PascalCase .EntityName}}ReadAllInteractor struct {
	outport Outport
}

// NewUsecase is constructor for create default implementation of usecase
func NewUsecase(outputPort Outport) Inport {
	return &{{PascalCase .EntityName}}ReadAllInteractor{
		outport: outputPort,
	}
}

// Execute the usecase
func (r *{{PascalCase .EntityName}}ReadAllInteractor) Execute(ctx context.Context, req InportRequest) (*InportResponse, error) {

	res := &InportResponse{}

	err := sharedservice.WithoutTransaction(ctx, r.outport, func(ctx context.Context) error {

		{{PascalCase .EntityName}}Objs, count, err := r.outport.FindAll{{PascalCase .EntityName}}(ctx, repository.FindAll{{PascalCase .EntityName}}RepoRequest{
			Page:      req.Page,
			Size:      req.Size,
			NameLike:  req.NameLike,
			DateStart: req.DateStart,
			DateEnd:   req.DateEnd,
		})
		if err != nil {
			return err
		}

		for _, obj := range {{PascalCase .EntityName}}Objs {

			res.ListOf{{PascalCase .EntityName}} = append(res.ListOf{{PascalCase .EntityName}}, {{PascalCase .EntityName}}{
				ID:   obj.ID.String(),
				Name: obj.Name,
				Date: obj.Date,
			})

		}

		res.Count = count

		return nil
	})

	if err != nil {
		return nil, err
	}

	return res, nil
}
